<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Targets to download the CBDE binaries if required. 
  
       The files will be downloaded automatically if they are not found locally.
       
       To force the files to be downloaded even if they exist, set the build property "UpdateCBDE" to true.
  
  -->
  
  <PropertyGroup>
    <CBDEFolder>$(MSBuildProjectDirectory)\CBDE\</CBDEFolder>
  </PropertyGroup>

  <ItemGroup>
    <CBDEUrls Include="http://repox.jfrog.io/repox/sonarsource-public-builds/org/sonarsource/cbde/windows/cbde-windows.zip" >
      <SubFolder>windows</SubFolder>
    </CBDEUrls>
    <CBDEUrls Include="http://repox.jfrog.io/repox/sonarsource-public-builds/org/sonarsource/cbde/linux/cbde-linux.zip" >
      <SubFolder>linux</SubFolder>
    </CBDEUrls>
  </ItemGroup>
  
  <!-- Specifies the CBDE files that should be included in the project and copied to the output directory -->
  <ItemGroup>
    <Content Include="$(CBDEFolder)\**\*.exe" >
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="$(CBDEFolder)\**\*.txt" >
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <Target Name="FetchCBDEBinaries" BeforeTargets="Build" >
    <RemoveDir Condition="$(UpdateCBDE)=='true'" Directories="$(CBDEFolder)" />

    <DownloadCBDEFiles SourceUrls="@(CBDEUrls)" RootDestinationFolder="$(CBDEFolder)" 
                       UpdateCBDE="$(UpdateCBDE)"
                       />
  </Target>

  <UsingTask TaskName="DownloadCBDEFiles" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <SourceUrls ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <RootDestinationFolder ParameterType="System.String" Required="false" />
      <UpdateCBDE ParameterType="System.Boolean" Required="false" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression.FileSystem" />
      <Using Namespace="System.Web" />
      <Using Namespace="System.Net" />
      <Code Type="Class" Language="cs">
        <![CDATA[

using System;
using System.IO;
using System.Net;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;

public class DownloadCBDEFiles : Task
{
    [Required]
    public ITaskItem[] SourceUrls { get; set; }

    [Required]
    public string RootDestinationFolder { get; set; }

    public bool UpdateCBDE { get; set; }

    public override bool Execute()
    {
        Log.LogMessage(MessageImportance.High, "CBDE: UpdateCBDE: {0}", UpdateCBDE);

        foreach (var item in SourceUrls)
        {
            var url = item.ItemSpec;
            var subFolderName = item.GetMetadata("SubFolder");
            var subFolderPath = Path.Combine(RootDestinationFolder, subFolderName);
            ProcessUrl(url, subFolderName, subFolderPath);
        }

        return !Log.HasLoggedErrors;
    }

    private void ProcessUrl(string url, string subFolderName, string subFolderPath)
    {
        var urlLocalPath = new Uri(url).LocalPath;
        var localZipFileName = Path.Combine(subFolderPath, Path.GetFileName(urlLocalPath));

        if (File.Exists(localZipFileName) && !UpdateCBDE)
        {
            Log.LogMessage(MessageImportance.High, "CBDE: {0} zip file exists: {1}", subFolderName, localZipFileName);
        }
        else
        {
            Log.LogMessage(MessageImportance.High, "CBDE: {0}: downloading {1}", subFolderName, url);
            DownloadAndExtract(url, localZipFileName);
        }
    }

    private void DownloadAndExtract(string url, string localZipFileName)
    {
        var directory = Path.GetDirectoryName(localZipFileName);
        Log.LogMessage(MessageImportance.High, "CBDE:   directory: {0}", directory);
        if (System.IO.Directory.Exists(directory))
        {
            Log.LogMessage(MessageImportance.High, "CBDE:   deleting any existing files...");
            Directory.Delete(directory, true /* recursive*/ );
            System.IO.Directory.CreateDirectory(directory);
        }
        else
        {
            Log.LogMessage(MessageImportance.High, "CBDE:   creating directory {0}", directory);
            System.IO.Directory.CreateDirectory(directory);
        }

        using (var client = new System.Net.WebClient())
        {
            client.DownloadFile(url, localZipFileName);
        }

        Log.LogMessage(MessageImportance.High, "CBDE:   extracting binaries...");
        System.IO.Compression.ZipFile.ExtractToDirectory(localZipFileName, directory);
        Log.LogMessage(MessageImportance.High, "CBDE:   binaries extracted");
    }
}


]]>
      </Code>
    </Task>
  </UsingTask>

</Project>